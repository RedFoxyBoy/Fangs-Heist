local ts = tostring
local mt, MT, T
local defskins = 0
-- Child metatable
local toString = function(tbl) -- Get child table name
	if tbl == mt
		return "SkinVars metatable"
	end
	return "SkinVars ("..tostring(tbl.index)..")"
end

local getLength = function(tbl) -- Return table ID as a number
	if skins[index]
		return #skins[index]
	else
		return -1
	end
end

local getDefaultIndex = function(tbl, key) -- Return default index from child metatable
	if mt == tbl
		return nil
	end
	return mt[key]
end

mt = { -- Setup child metatable
	index = "undefined",
	__tostring = toString,
	__len = getLength,
	__index = getDefaultIndex,
	metatable = true
}
setmetatable(mt, mt)

-- Parent metatable

local toString = function(tbl) -- Get parent table name
	if tbl == MT
		return "SkinVars master metatable"
	else
		return "SkinVars master table"
	end
end

local getTable = function(t, key)
	-- What kind of argument is this?
	if type(key) == "number" and key >= 0
		 -- Get usable string from skin
		key = skins[key]
		if key == nil
			return nil -- Use with care!
		end
		key = $.name
		local new = rawget(t, key)
		if new
			return new
		end
	end

	-- Construct default child table for undefined key
	print("Attempted to access nil entry at "..ts(t).." key "..key)
	t[key] = {autogenerated = true} -- Install blank table (will use metatable defaults)
	return rawget(t, key)
end

local setTable = function(t, key, sv) -- Construct child table
	local name = key
	-- Convert number key values to a usable string. No one should ever try to set a number in place of a skin name, but we'll bend over backwards because we're nice.
	if type(key) == "number" and key >= 0 -- Note: -1 is used as an accessible "default" entry.
		assert(#skins > key, "Skin "..key.." out of range! ("..#skins..")")
		name = skins[key].name
	end

	-- Are we clearing this table entry?
	local old = rawget(t, key)
	if sv == nil and old != nil
		rawset(t, key, sv)
		print("Unset "..tostring(old))
		return
	end
	
	-- Make sure we're actually setting a table
	assert(type(sv) == "table", "Got "..type(sv).." value for SkinVars ID "..name.." (expected table)")

	-- Set reverse look-up index for this table
	if sv.index != name
		sv.index = name
	end
	
	-- Set metatable
	if getmetatable(sv) != mt
		setmetatable(sv, mt)
	end
	
	-- Finally, set the table to our master table
	rawset(t, key, sv)
	print("Set "..ts(sv))
end

-- Setup parent metatable
MT = {
	__index = getTable,
	__newindex = setTable,
	__usedindex = setTable,
	__tostring = toString,
	__metatable = true
}
print("Creating skinvars metatable: "..ts(MT))
setmetatable(MT, MT)

-- Setup parent table
T = {}
setmetatable(T, MT)
print("Set "..ts(T).." to "..ts(MT))

COM_AddCommand("BattleSkinVars", do
	print(T)
	
	-- Retrieve SkinVars for existing skins
	for n = 0, #skins - 1 do
		local color = not T[n].autogenerated and "\x83" or "\x85"
		print(	"["..n.."] "..color..skins[n].name)
	end
	-- Retrieve Skinvars for nonexisting skins
	for n,m in pairs(T) do
		if m.index == -1 or skins[m.index]
			continue
		end
		print(	"["..n.."] \x83"..m.index)
	end
end)

-- Add metatable under entry -1
T[-1] = mt

-- Set to global
CBW_Battle.SkinVars = T
